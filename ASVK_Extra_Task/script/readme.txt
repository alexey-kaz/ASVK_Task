Казантаев Алексей 213

Дополнительное задание 1:

Я написал скрипт, который запускает многопоточную программу n-ное число раз, каждый раз увеличивая задаваемое количество потоков на 1, а также программу с основным алгоритмом. Запуск каждой программы (и многопоточной, и основной) происходит m раз, после чего высчитывается среднее арефметическое времени выполнения (САВВ) программы, его записываем в файл out.txt. В итоге файл out.txt будет содержать в себе n+1 значение. После высчитываем процент, который составляет САВВ каждой многопоточной программы от САВВ основной программы, результат записываем в percent.txt.
Также я написал программу на Python, которая с помощью matplotlib (обязателен для выполнения) строит по полученным данным (percent.txt) график. Ось абсцисс - число потоков, ось ординат - на сколько (в % относительно базового алгоритма) уменьшается время выполнения программы при увеличении числа потоков.

Компиляция скрипта:
g++ script.cpp -o script

Запуск скрипта:
./script file.xml (название в директории или путь к файлу с входными данными) num_of_threads (число потоков для исследования) num_of_test (количество тестов для каждого потока)

Пример запуска: 
./script test128.xml 20 20
При тестировании будет использован test128.xml, программа с многопоточностью будет запущена по 20 раз на каждый из 20 запусков с разным количеством потоков (от 1 до 20) и 20 раз будет запущен основной алгоритм.

Процесс исследования: 
Ожидалась уменьшение времени выполнения программы при каждом увеличении числа потоков.
В реальности был получен график, который сначала растет (по виду похоже на логарифм), а после определенной точки приостанавливает увеличение и или останавливается на одном уровне, или начинает медленно уменьшаться. Я пришёл к выводу, что это может происходить в силу того, что у моей ВС мало ядер. В какой-то момент они кончаются, и скорость выполнения больше не уменьшается, так как дополнительно задействованные ядра уже заняты. Идет смена контекста, и, следовательно, мощность уменьшается.
